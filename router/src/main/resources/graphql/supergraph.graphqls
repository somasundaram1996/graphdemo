schema
@link(url: "https://specs.apollo.dev/link/v1.0")
@link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
    query: Query
    mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

scalar join__FieldSet

enum join__Graph {
    LOCATIONS @join__graph(name: "locations", url: "http://localhost:8080/graphql")
    REVIEWS @join__graph(name: "reviews", url: "http://localhost:8081/graphql")
}

scalar link__Import

enum link__Purpose {
    """
    `SECURITY` features provide metadata necessary to securely resolve fields.
    """
    SECURITY

    """
    `EXECUTION` features provide metadata necessary for operation execution.
    """
    EXECUTION
}

type Location
@join__type(graph: LOCATIONS, key: "id", resolvable: true)
{
    description: String!
    id: ID!
    name: String!
}

input LocationReviewInput
@join__type(graph: REVIEWS)
{
    comment: String!
    locationId: String!
    rating: Int!
}

type Mutation
@join__type(graph: REVIEWS)
{
    submitReview(locationReview: LocationReviewInput!): SubmitReviewResponse
}

type Query
@join__type(graph: LOCATIONS)
@join__type(graph: REVIEWS)
{
    location(id: ID): Location @join__field(graph: LOCATIONS)
    locations: [Location!]! @join__field(graph: LOCATIONS)
    latestReviews: [Review!]! @join__field(graph: REVIEWS)
}

type Review
@join__type(graph: REVIEWS, key: "id", resolvable: true)
{
    comment: String!
    id: ID!
    rating: Int!
}

type SubmitReviewResponse
@join__type(graph: REVIEWS)
{
    code: Int!
    locationReview: Review
    message: String!
    success: Boolean!
}
